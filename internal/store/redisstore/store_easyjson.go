// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package redisstore

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson55774c79DecodeGithubComZombieMIndSearchEngineInternalStoreRedisstore(in *jlexer.Lexer, out *RedisSitemap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "domain":
			out.Domain = string(in.String())
		case "Keywords":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Keywords = make(map[string][]RedisPage)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 []RedisPage
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make([]RedisPage, 0, 1)
							} else {
								v1 = []RedisPage{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 RedisPage
							(v2).UnmarshalEasyJSON(in)
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Keywords)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson55774c79EncodeGithubComZombieMIndSearchEngineInternalStoreRedisstore(out *jwriter.Writer, in RedisSitemap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"domain\":"
		out.RawString(prefix[1:])
		out.String(string(in.Domain))
	}
	{
		const prefix string = ",\"Keywords\":"
		out.RawString(prefix)
		if in.Keywords == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.Keywords {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				if v3Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v4, v5 := range v3Value {
						if v4 > 0 {
							out.RawByte(',')
						}
						(v5).MarshalEasyJSON(out)
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RedisSitemap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson55774c79EncodeGithubComZombieMIndSearchEngineInternalStoreRedisstore(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RedisSitemap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson55774c79EncodeGithubComZombieMIndSearchEngineInternalStoreRedisstore(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RedisSitemap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson55774c79DecodeGithubComZombieMIndSearchEngineInternalStoreRedisstore(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RedisSitemap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson55774c79DecodeGithubComZombieMIndSearchEngineInternalStoreRedisstore(l, v)
}
func easyjson55774c79DecodeGithubComZombieMIndSearchEngineInternalStoreRedisstore1(in *jlexer.Lexer, out *RedisPage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "URL":
			out.URL = string(in.String())
		case "Title":
			out.Title = string(in.String())
		case "Description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson55774c79EncodeGithubComZombieMIndSearchEngineInternalStoreRedisstore1(out *jwriter.Writer, in RedisPage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"URL\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RedisPage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson55774c79EncodeGithubComZombieMIndSearchEngineInternalStoreRedisstore1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RedisPage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson55774c79EncodeGithubComZombieMIndSearchEngineInternalStoreRedisstore1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RedisPage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson55774c79DecodeGithubComZombieMIndSearchEngineInternalStoreRedisstore1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RedisPage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson55774c79DecodeGithubComZombieMIndSearchEngineInternalStoreRedisstore1(l, v)
}
