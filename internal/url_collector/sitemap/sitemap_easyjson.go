// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package sitemap

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	url "net/url"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAb97049bDecodeGithubComZombieMIndSearchEngineInternalUrlCollectorSitemap(in *jlexer.Lexer, out *Sitemap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "domain":
			if in.IsNull() {
				in.Skip()
				out.BaseURL = nil
			} else {
				if out.BaseURL == nil {
					out.BaseURL = new(url.URL)
				}
				easyjsonAb97049bDecodeNetUrl(in, out.BaseURL)
			}
		case "Keywords":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Keywords = make(map[string][]Page)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 []Page
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make([]Page, 0, 1)
							} else {
								v1 = []Page{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 Page
							(v2).UnmarshalEasyJSON(in)
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Keywords)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "pages":
			if in.IsNull() {
				in.Skip()
				out.Pages = nil
			} else {
				in.Delim('[')
				if out.Pages == nil {
					if !in.IsDelim(']') {
						out.Pages = make([]Page, 0, 1)
					} else {
						out.Pages = []Page{}
					}
				} else {
					out.Pages = (out.Pages)[:0]
				}
				for !in.IsDelim(']') {
					var v3 Page
					(v3).UnmarshalEasyJSON(in)
					out.Pages = append(out.Pages, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAb97049bEncodeGithubComZombieMIndSearchEngineInternalUrlCollectorSitemap(out *jwriter.Writer, in Sitemap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"domain\":"
		out.RawString(prefix[1:])
		if in.BaseURL == nil {
			out.RawString("null")
		} else {
			easyjsonAb97049bEncodeNetUrl(out, *in.BaseURL)
		}
	}
	{
		const prefix string = ",\"Keywords\":"
		out.RawString(prefix)
		if in.Keywords == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Keywords {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				if v4Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v5, v6 := range v4Value {
						if v5 > 0 {
							out.RawByte(',')
						}
						(v6).MarshalEasyJSON(out)
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Pages) != 0 {
		const prefix string = ",\"pages\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v7, v8 := range in.Pages {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Sitemap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAb97049bEncodeGithubComZombieMIndSearchEngineInternalUrlCollectorSitemap(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Sitemap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAb97049bEncodeGithubComZombieMIndSearchEngineInternalUrlCollectorSitemap(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Sitemap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAb97049bDecodeGithubComZombieMIndSearchEngineInternalUrlCollectorSitemap(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Sitemap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAb97049bDecodeGithubComZombieMIndSearchEngineInternalUrlCollectorSitemap(l, v)
}
func easyjsonAb97049bDecodeNetUrl(in *jlexer.Lexer, out *url.URL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Scheme":
			out.Scheme = string(in.String())
		case "Opaque":
			out.Opaque = string(in.String())
		case "User":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(url.Userinfo)
				}
				easyjsonAb97049bDecodeNetUrl1(in, out.User)
			}
		case "Host":
			out.Host = string(in.String())
		case "Path":
			out.Path = string(in.String())
		case "RawPath":
			out.RawPath = string(in.String())
		case "ForceQuery":
			out.ForceQuery = bool(in.Bool())
		case "RawQuery":
			out.RawQuery = string(in.String())
		case "Fragment":
			out.Fragment = string(in.String())
		case "RawFragment":
			out.RawFragment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAb97049bEncodeNetUrl(out *jwriter.Writer, in url.URL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Scheme\":"
		out.RawString(prefix[1:])
		out.String(string(in.Scheme))
	}
	{
		const prefix string = ",\"Opaque\":"
		out.RawString(prefix)
		out.String(string(in.Opaque))
	}
	{
		const prefix string = ",\"User\":"
		out.RawString(prefix)
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjsonAb97049bEncodeNetUrl1(out, *in.User)
		}
	}
	{
		const prefix string = ",\"Host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"Path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"RawPath\":"
		out.RawString(prefix)
		out.String(string(in.RawPath))
	}
	{
		const prefix string = ",\"ForceQuery\":"
		out.RawString(prefix)
		out.Bool(bool(in.ForceQuery))
	}
	{
		const prefix string = ",\"RawQuery\":"
		out.RawString(prefix)
		out.String(string(in.RawQuery))
	}
	{
		const prefix string = ",\"Fragment\":"
		out.RawString(prefix)
		out.String(string(in.Fragment))
	}
	{
		const prefix string = ",\"RawFragment\":"
		out.RawString(prefix)
		out.String(string(in.RawFragment))
	}
	out.RawByte('}')
}
func easyjsonAb97049bDecodeNetUrl1(in *jlexer.Lexer, out *url.Userinfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAb97049bEncodeNetUrl1(out *jwriter.Writer, in url.Userinfo) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjsonAb97049bDecodeGithubComZombieMIndSearchEngineInternalUrlCollectorSitemap1(in *jlexer.Lexer, out *Page) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(url.URL)
				}
				easyjsonAb97049bDecodeNetUrl(in, out.Url)
			}
		case "Keywords":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Keywords = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 interface{}
					if m, ok := v9.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v9.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v9 = in.Interface()
					}
					(out.Keywords)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Title":
			out.Title = string(in.String())
		case "Description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAb97049bEncodeGithubComZombieMIndSearchEngineInternalUrlCollectorSitemap1(out *jwriter.Writer, in Page) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Url\":"
		out.RawString(prefix[1:])
		if in.Url == nil {
			out.RawString("null")
		} else {
			easyjsonAb97049bEncodeNetUrl(out, *in.Url)
		}
	}
	{
		const prefix string = ",\"Keywords\":"
		out.RawString(prefix)
		if in.Keywords == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Keywords {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				if m, ok := v10Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v10Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v10Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Page) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAb97049bEncodeGithubComZombieMIndSearchEngineInternalUrlCollectorSitemap1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Page) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAb97049bEncodeGithubComZombieMIndSearchEngineInternalUrlCollectorSitemap1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Page) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAb97049bDecodeGithubComZombieMIndSearchEngineInternalUrlCollectorSitemap1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Page) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAb97049bDecodeGithubComZombieMIndSearchEngineInternalUrlCollectorSitemap1(l, v)
}
